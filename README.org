* devos
test-driven dynamically-themed well-documented host-development
** FEATURES
*** WIP TTD
  - lib
  - profiles
  - modules
  - suites
  - hosts
**** TODO GPU-passthru is required for graphical host-tests
*** TODO dynamicTheme
- ~bud theme {dracula,gruvbox,...}~
- ... and automagically all (WIP) programs change their appearance...
*** WIP doc.local
- a documentation-server
- displays only the available features (host-specific)
- available by pressing =SUPER-F1=
- hugo
*** WIP cookbook
- nix isn't that convenient
- keep {issues,solutions,ideas} in one location
- ingredients
- recipies
*** manualActions
- keep track of actions (only todos - tasks have to be automated) which have to be done manually
***  hjkl ‚ü∂ jkl;
*** Config-Devel-Workflow
- use ~ranger~
- navigate to the symlinked configFile
- create a local copy with =xni= (eXecuteNixdevelIn)
- make your changes
- create patch with =xnpc= (eXecuteNixdevelPatchCreate)
- navigate to the source configFile
- apply patch with =xnpa= (eXecuteNixdevelPatchApply)
  - be carefull the source file may be a nix file or concatenated (a backup will be created automatically)
- navigate to the symlinked configFile
- remove the local copy with =xno= (eXecuteNixdevelOut)
- switch with =bs= (BudSwitchlocalmachine)
**** TODO dynamic docKeybindings
** WORKFLOWS
cf.: =doc/WORKFLOWS=
** ROADMAP
*** DONE make ryzen useable
**** DONE i3 (on X)
**** DONE emacs
**** DONE browser
chromium
**** DONE secrets
**** DONE backup (kopia)
**** DONE manualActions
**** DONE pulsewire
nec for microphone
*** DONE nuc
*** DONE generate ISOs
*** DONE DEV-STICK for external usage
*** DONE k8s
*** cleanup hostTests
*** gpuPassthrou for tests
*** allTests
*** v1
*** keep a changelog
*** cleanup
**** documentation
***** sidebarRight: indent according to level
***** colorize headlines like orgMode
***** enable all docs
***** all doc-TODOS
***** cleanup docDir
**** TODOS
**** {fixMissing,improve} tests
Do not test for existence, test behavior
*** exampleHost: nixos{,VM,ISO}
public keys
testHost only for tests
*** CI/CD-able
**** usecase-tests
trust the tests
**** autoUpdate hosts
*** langs
**** nixlang
***** [#A] lsp
**** python
***** [#A] lsp in tests
****** machine
****** driver
****** lib.testing
*** ISO (FULL)
*** fully-encrypted-Stick
with personal keys and gopassStore
"lo(o)sable"
*** Rescue-Stick
*** Install-Stick
*** ALIASES
*** DYNAMIC-THEME
*** LATER
**** langs
***** golang
***** flutter
***** rust
**** firefox
***** addons
**** nuc
**** wayland
**** music
**** lutris
**** mac
***** transfer all configs (=etc/nixos=, =~/.config=)
***** data via borg
***** cleanup
***** new SSD
***** devos
**** cookbook
** INFO
*** DOCUMENTATION
**** devDoc
- inline
- =README.org=
**** userDoc
- will be made available on the hosts via hugo
- =doc.org[.nix]=
*** TESTING
cf.: =tests/README.org=
*** COMMANDS
cf.: =shell/README.org=
*** DEBUG
**** option not available
***** message
#+BEGIN_SRC shell :results none
  error: The option `<OPTION>' does not exist. Definition values:
  ### ...
#+END_SRC
***** solution
- check =flake.nix= nixpkgs might have changed
- check =nixos/default.nix= for channel changes
**** use ldflags instead of buildFlags
***** message
#+BEGIN_EXAMPLE shell
trace: warning: Use the `ldflags` and/or `tags` attributes instead of `buildFlags`/`buildFlagsArray`
#+END_EXAMPLE
***** solution
replace ~buildFlagsArray~ with ~ldflags~ in a derivation using ~buildGoModule~
#+BEGIN_EXAMPLE shell
  buildFlagsArray = [
    "-ldflags=-X github.com/pulumi/crd2pulumi/gen.Version=${version}"
  ];
#+END_EXAMPLE
#+BEGIN_EXAMPLE shell
  ldflags = "-X github.com/pulumi/crd2pulumi/gen.Version=${version}";
#+END_EXAMPLE
