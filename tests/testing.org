* TODO testing
** creation
- create a directory with a =default.nix=
- the name of the directory will be used automatically as the testname (nec. for ~collectTests~)
- the uppercaseTestname is used in the derivationName =/nix/store/<hash>-nixos-test-driver-TESTNAME.drv=
- just copy a working test and adjust it
- tests are automatically registered via ~collectTests~
- tests have to be staged in order to be available to the flake !!!
- register test in =shell/bud/tests.bash=
** run
*** single test
#+BEGIN_EXAMPLE shell
nix build .#tests.screenshot
#+END_EXAMPLE
*** all tests
#+BEGIN_EXAMPLE shell
bud tests
#+END_EXAMPLE
*** check for available test
1. enter the ~nix repl~
2. load flake ~:lf ./.~
3. check for possible completions (tab) for the ~tests.~ attribute
** INFO
*** naming
in order to be collectable and callable with the shortest name possible, *the testname must be created automatically* (based on dirname).
*** testing
**** do not use ~whereis COMMAND~
will always exit with 0
*** ~copy_from_host~
can only copy files, which are in the nix store
cannot be used directly from python
cf. =tests/nixos/profiles/console/default.nix=
*** screenshots
**** python commands do not produce a result
#+BEGIN_EXAMPLE python
machine.succeed("cat /home/nixos/test.txt")
#+END_EXAMPLE
**** use
***** XOR
#+BEGIN_EXAMPLE python
machine.send_chars("cat /home/nixos/test.txt")
machine.send_key(  "ret")
#+END_EXAMPLE
#+BEGIN_EXAMPLE python
machine.send_chars("cat /home/nixos/test.txt\n")
#+END_EXAMPLE
**** console
if a screenshot is taken from a console the cursor has to be invisible.
*** profiles
**** all profiles enabled in host will be available during tests
*** testHelpers
**** are globally defined in =lib/testing/auxiliary.py=
***** usage
cf. =tests/nixos/profiles/timezone/amsterdam/default.nix=
*** general information concerning testing in the nix-ecosystem
**** types
***** system
***** package
***** content
**** docs
- NixOS - NixOS 21.11 manual
  https://nixos.org/manual/nixos/stable/index.html#sec-nixos-tests

- NixOS - Nixpkgs 21.11 manual
  https://nixos.org/manual/nixpkgs/stable/#sec-package-tests

- Building and Testing
  https://nixos.org/manual/nix/stable/expressions/simple-building-testing.html

- NixOS Testing library - NixOS Wiki
  https://nixos.wiki/wiki/NixOS_Testing_library

- nixpkgs/nixos/tests at master · NixOS/nixpkgs
  https://github.com/NixOS/nixpkgs/tree/master/nixos/tests

- devos/default.nix at 235d9befc2495850d4679b73541c894b266e5d8a · d4hines/devos
  https://github.com/d4hines/devos/blob/235d9befc2495850d4679b73541c894b266e5d8a/lib/pkgs-lib/tests/default.nix
**** src
***** nixosTests-commands
=nixpkgs/nixos/lib/test-driver/test_driver/machine.py=
***** noteworthy examples:
=nixpkgs/nixos/tests/atop.nix=
=nixpkgs/nixos/tests/chromium.nix=
=nixpkgs/nixos/tests/fcitx/default.nix=

**** github search
- Search · mkTest extension:nix
    https://github.com/search?q=mkTest+extension%3Anix&type=Code&ref=advsearch&l=&l=

**** tutorials
***** nixosTests
- Running integration tests the nix way #howto
    https://gist.github.com/573/5df7e2e6d72fe31f85a26dd700d08ded

- Haskell for all: How to use NixOS for lightweight integration tests
    https://www.haskellforall.com/2020/11/how-to-use-nixos-for-lightweight.html

- Sander van der Burg's blog: A test framework for the Nix process management framework
    https://sandervanderburg.blogspot.com/2021/04/a-test-framework-for-nix-process.html

- Leveraging NixOS Tests in your Project
    https://nixos.mayflower.consulting/blog/2019/07/11/leveraging-nixos-tests-in-your-project/

- Integration testing using virtual machines (VMs) — nix.dev documentation
    https://nix.dev/tutorials/integration-testing-using-virtual-machines

**** examples
https://github.com/impl/nix-sops/blob/92ce97b8e2ac64fc1fae55fff307aeee83fecdc5/tests/home-manager/make-test.nix
https://github.com/tweag/trustix/blob/e89875c2a40588c7badeb52ec31ea23fa2e0c7b6/packages/trustix/tests/default.nix
https://github.com/NixOS/nixpkgs/blob/master/nixos/tests/nat.nix#L67
https://github.com/tubleronchik/kuka-airapkgs/blob/d3bea431b0a092c67256f0c92e362f641182af8b/pkgs/build-support/rust/build-rust-crate/test/default.nix
***** devos
****** 1
https://github.com/jbl-proglove/devos/blob/4dd727c4015885ba0a300042fccee76599c1dfa9/tests/default.nix
https://github.com/rafifos/devos/tree/bb9dc54af8a83d498ce3ef529a8efc575758952b/tests
****** 2
https://github.com/divnix/digga/blob/main/src/tests.nix
****** 3
https://github.com/d4hines/devos/blob/235d9befc2495850d4679b73541c894b266e5d8a/lib/pkgs-lib/tests/default.nix

** *TODOS*
*** TODO create this file dynamically from module
*** TODO test lib like digga
currently not working because of flake-util error
reopen after realign with digga
*** TODO test profiles
- profiles.core
- profiles.i18n
- profiles.services.printing
- profiles.services.ssh
- profiles.services.xserver
- profiles.sound
- profiles.systemd.sleepDisable
*** snippets
#+BEGIN_EXAMPLE python
machine.wait_until_succeeds("pgrep -u nixos bash")
#+END_EXAMPLE
**** change tty
#+BEGIN_EXAMPLE python
machine.send_key("ctrl-alt-f2")
#+END_EXAMPLE
*** TODO check user nixos and root on hosts *NixOS*
